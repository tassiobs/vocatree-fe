{"ast":null,"code":"import axios from 'axios';\nclass ApiClient {\n  constructor(baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000') {\n    this.client = void 0;\n    this.baseURL = void 0;\n    this.isBackendAvailable = void 0;\n    this.baseURL = baseURL;\n    this.client = axios.create({\n      baseURL: this.baseURL,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Check if backend is available\n    this.isBackendAvailable = true;\n\n    // Request interceptor to add auth token\n    this.client.interceptors.request.use(config => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Response interceptor for error handling\n    this.client.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        localStorage.removeItem('auth_token');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Authentication\n  async signIn(credentials) {\n    const response = await this.client.post('/auth/signin', credentials);\n    return response.data;\n  }\n\n  // Cards\n  async createCard(card) {\n    const response = await this.client.post('/cards/', card);\n    return response.data;\n  }\n  async getCards(params) {\n    const response = await this.client.get('/cards/', {\n      params\n    });\n    return response.data;\n  }\n  async getCard(id) {\n    const response = await this.client.get(`/cards/${id}`);\n    return response.data;\n  }\n  async updateCard(id, card) {\n    const response = await this.client.patch(`/cards/${id}`, card);\n    return response.data;\n  }\n  async deleteCard(id) {\n    await this.client.delete(`/cards/${id}`);\n  }\n  async moveCard(id, newParentId) {\n    await this.client.patch(`/cards/${id}/move`, {\n      new_parent_id: newParentId\n    });\n  }\n  async getCardsByParent(parentId, params) {\n    const response = await this.client.get(`/cards/by-parent/${parentId}`, {\n      params\n    });\n    return response.data;\n  }\n  async getCardsHierarchy() {\n    const response = await this.client.get('/cards/hierarchy');\n    return response.data;\n  }\n\n  // Utility method to set auth token\n  setAuthToken(token) {\n    localStorage.setItem('auth_token', token);\n  }\n\n  // Utility method to remove auth token\n  removeAuthToken() {\n    localStorage.removeItem('auth_token');\n  }\n\n  // Utility method to check if user is authenticated\n  isAuthenticated() {\n    return !!localStorage.getItem('auth_token');\n  }\n}\nexport const apiClient = new ApiClient();\nexport default apiClient;","map":{"version":3,"names":["axios","ApiClient","constructor","baseURL","process","env","REACT_APP_API_URL","client","isBackendAvailable","create","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","signIn","credentials","post","data","createCard","card","getCards","params","get","getCard","id","updateCard","patch","deleteCard","delete","moveCard","newParentId","new_parent_id","getCardsByParent","parentId","getCardsHierarchy","setAuthToken","setItem","removeAuthToken","isAuthenticated","apiClient"],"sources":["/Users/tassiobs/Documents/vocatree-front/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport {\n  AuthSignInRequest,\n  AuthToken,\n  Card,\n  CardCreate,\n  CardUpdate,\n  CardListResponse\n} from '../types/api';\nimport { mockApi } from './mockApi';\n\nclass ApiClient {\n  private client: AxiosInstance;\n  private baseURL: string;\n  private isBackendAvailable: boolean;\n\n  constructor(baseURL: string = process.env.REACT_APP_API_URL || 'http://localhost:8000') {\n    this.baseURL = baseURL;\n    this.client = axios.create({\n      baseURL: this.baseURL,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    // Check if backend is available\n    this.isBackendAvailable = true;\n\n    // Request interceptor to add auth token\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('auth_token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Response interceptor for error handling\n    this.client.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('auth_token');\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Authentication\n  async signIn(credentials: AuthSignInRequest): Promise<AuthToken> {\n    const response: AxiosResponse<AuthToken> = await this.client.post('/auth/signin', credentials);\n    return response.data;\n  }\n\n  // Cards\n  async createCard(card: CardCreate): Promise<Card> {\n    const response: AxiosResponse<Card> = await this.client.post('/cards/', card);\n    return response.data;\n  }\n\n  async getCards(params?: {\n    parent_id?: number | null;\n    limit?: number;\n    offset?: number;\n  }): Promise<CardListResponse> {\n    const response: AxiosResponse<CardListResponse> = await this.client.get('/cards/', { params });\n    return response.data;\n  }\n\n  async getCard(id: number): Promise<Card> {\n    const response: AxiosResponse<Card> = await this.client.get(`/cards/${id}`);\n    return response.data;\n  }\n\n  async updateCard(id: number, card: CardUpdate): Promise<Card> {\n    const response: AxiosResponse<Card> = await this.client.patch(`/cards/${id}`, card);\n    return response.data;\n  }\n\n  async deleteCard(id: number): Promise<void> {\n    await this.client.delete(`/cards/${id}`);\n  }\n\n  async moveCard(id: number, newParentId: number | null): Promise<void> {\n    await this.client.patch(`/cards/${id}/move`, { new_parent_id: newParentId });\n  }\n\n  async getCardsByParent(parentId: number, params?: {\n    limit?: number;\n    offset?: number;\n  }): Promise<CardListResponse> {\n    const response: AxiosResponse<CardListResponse> = await this.client.get(\n      `/cards/by-parent/${parentId}`,\n      { params }\n    );\n    return response.data;\n  }\n\n  async getCardsHierarchy(): Promise<Card[]> {\n    const response: AxiosResponse<Card[]> = await this.client.get('/cards/hierarchy');\n    return response.data;\n  }\n\n  // Utility method to set auth token\n  setAuthToken(token: string): void {\n    localStorage.setItem('auth_token', token);\n  }\n\n  // Utility method to remove auth token\n  removeAuthToken(): void {\n    localStorage.removeItem('auth_token');\n  }\n\n  // Utility method to check if user is authenticated\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('auth_token');\n  }\n}\n\nexport const apiClient = new ApiClient();\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}