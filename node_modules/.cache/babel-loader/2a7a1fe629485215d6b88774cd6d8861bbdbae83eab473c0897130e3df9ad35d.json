{"ast":null,"code":"var _jsxFileName = \"/Users/tassiobs/Documents/vocatree-fe/src/hooks/useAuth.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { apiClient } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already authenticated\n    const savedToken = localStorage.getItem('auth_token');\n    if (savedToken) {\n      setToken(savedToken);\n      // In a real app, you might want to validate the token with the server\n      // For now, we'll assume it's valid if it exists\n      setIsLoading(false);\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const authResponse = await apiClient.signIn({\n        email,\n        password\n      });\n      const authToken = authResponse.access_token;\n      apiClient.setAuthToken(authToken);\n      setToken(authToken);\n\n      // Create a basic user object (in a real app, you might get this from the server)\n      const userData = {\n        id: 1,\n        // This would come from the server\n        email,\n        created_at: new Date().toISOString()\n      };\n      setUser(userData);\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    apiClient.removeAuthToken();\n    setToken(null);\n    setUser(null);\n  };\n  const value = {\n    user,\n    token,\n    login,\n    logout,\n    isLoading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"mX4/AXRUN66G8j/NKXHYWKblzjI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","apiClient","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","isLoading","setIsLoading","savedToken","localStorage","getItem","login","email","password","authResponse","signIn","authToken","access_token","setAuthToken","userData","id","created_at","Date","toISOString","error","console","logout","removeAuthToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tassiobs/Documents/vocatree-fe/src/hooks/useAuth.tsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User, AuthContextType } from '../types';\nimport { apiClient } from '../services/api';\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is already authenticated\n    const savedToken = localStorage.getItem('auth_token');\n    if (savedToken) {\n      setToken(savedToken);\n      // In a real app, you might want to validate the token with the server\n      // For now, we'll assume it's valid if it exists\n      setIsLoading(false);\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const login = async (email: string, password: string): Promise<void> => {\n    try {\n      const authResponse = await apiClient.signIn({ email, password });\n      const authToken = authResponse.access_token;\n      \n      apiClient.setAuthToken(authToken);\n      setToken(authToken);\n      \n      // Create a basic user object (in a real app, you might get this from the server)\n      const userData: User = {\n        id: 1, // This would come from the server\n        email,\n        created_at: new Date().toISOString(),\n      };\n      setUser(userData);\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  };\n\n  const logout = (): void => {\n    apiClient.removeAuthToken();\n    setToken(null);\n    setUser(null);\n  };\n\n  const value: AuthContextType = {\n    user,\n    token,\n    login,\n    logout,\n    isLoading,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAEjF,SAASC,SAAS,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,WAAW,gBAAGP,aAAa,CAA8BQ,SAAS,CAAC;AAEzE,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAuB;EAAAC,EAAA;EAC5C,MAAMC,OAAO,GAAGV,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAYpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAA4B,CAAC,KAAK;EAAAC,GAAA;EAC/D,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMmB,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACrD,IAAIF,UAAU,EAAE;MACdH,QAAQ,CAACG,UAAU,CAAC;MACpB;MACA;MACAD,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,MAAM;MACLA,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAoB;IACtE,IAAI;MACF,MAAMC,YAAY,GAAG,MAAMxB,SAAS,CAACyB,MAAM,CAAC;QAAEH,KAAK;QAAEC;MAAS,CAAC,CAAC;MAChE,MAAMG,SAAS,GAAGF,YAAY,CAACG,YAAY;MAE3C3B,SAAS,CAAC4B,YAAY,CAACF,SAAS,CAAC;MACjCX,QAAQ,CAACW,SAAS,CAAC;;MAEnB;MACA,MAAMG,QAAc,GAAG;QACrBC,EAAE,EAAE,CAAC;QAAE;QACPR,KAAK;QACLS,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC;MACDpB,OAAO,CAACgB,QAAQ,CAAC;IACnB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAY;IACzBpC,SAAS,CAACqC,eAAe,CAAC,CAAC;IAC3BtB,QAAQ,CAAC,IAAI,CAAC;IACdF,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,MAAMyB,KAAsB,GAAG;IAC7B1B,IAAI;IACJE,KAAK;IACLO,KAAK;IACLe,MAAM;IACNpB;EACF,CAAC;EAED,oBACEd,OAAA,CAACC,WAAW,CAACoC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA5B,QAAA,EAChCA;EAAQ;IAAA8B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAChC,GAAA,CA1DWF,YAAY;AAAAmC,EAAA,GAAZnC,YAAY;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}