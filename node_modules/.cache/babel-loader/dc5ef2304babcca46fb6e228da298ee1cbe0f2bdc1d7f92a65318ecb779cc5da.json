{"ast":null,"code":"import axios from 'axios';\nclass ApiClient {\n  constructor(baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000') {\n    this.client = void 0;\n    this.baseURL = void 0;\n    this.baseURL = baseURL;\n    this.client = axios.create({\n      baseURL: this.baseURL,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor to add auth token\n    this.client.interceptors.request.use(config => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Response interceptor for error handling\n    this.client.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        localStorage.removeItem('auth_token');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Authentication\n  async signIn(credentials) {\n    const response = await this.client.post('/auth/signin', credentials);\n    return response.data;\n  }\n\n  // Cards\n  async createCard(card) {\n    const response = await this.client.post('/cards/', card);\n    return response.data;\n  }\n  async getCards(params) {\n    const response = await this.client.get('/cards/', {\n      params\n    });\n    return response.data;\n  }\n  async getCard(id) {\n    const response = await this.client.get(`/cards/${id}`);\n    return response.data;\n  }\n  async updateCard(id, card) {\n    const response = await this.client.patch(`/cards/${id}`, card);\n    return response.data;\n  }\n  async deleteCard(id) {\n    console.log(`API: DELETE /cards/${id}`);\n    try {\n      await this.client.delete(`/cards/${id}`);\n      console.log(`API: Successfully deleted card ${id}`);\n    } catch (error) {\n      var _error$response2;\n      console.error(`API: Failed to delete card ${id}:`, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw error;\n    }\n  }\n  async deleteCardBulk(id) {\n    console.log(`API: DELETE /cards/${id}/bulk`);\n    try {\n      await this.client.delete(`/cards/${id}/bulk`);\n      console.log(`API: Successfully bulk deleted card ${id}`);\n    } catch (error) {\n      var _error$response3;\n      console.error(`API: Failed to bulk delete card ${id}:`, ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n      throw error;\n    }\n  }\n  async moveCard(id, newParentId) {\n    await this.client.patch(`/cards/${id}/move`, {\n      new_parent_id: newParentId\n    });\n  }\n  async getCardsByParent(parentId, params) {\n    const response = await this.client.get(`/cards/by-parent/${parentId}`, {\n      params\n    });\n    return response.data;\n  }\n  async getCardsHierarchy(categoryId) {\n    const params = categoryId ? {\n      category_id: categoryId\n    } : {};\n    const response = await this.client.get('/cards/hierarchy', {\n      params\n    });\n    return response.data;\n  }\n\n  // Categories\n  async getCategories() {\n    const response = await this.client.get('/categories/');\n    return response.data.items;\n  }\n  async createCategory(name) {\n    const response = await this.client.post('/categories/', {\n      name\n    });\n    return response.data;\n  }\n  async generateAITree(data) {\n    const response = await this.client.post('/categories/ai-generate-tree', data);\n    return response.data;\n  }\n  async bulkDeleteCategory(id) {\n    console.log(`API: POST /categories/bulk-delete with category_id: ${id}`);\n    try {\n      await this.client.post(`/categories/bulk-delete`, {\n        category_id: id\n      });\n      console.log(`API: Successfully bulk deleted category ${id}`);\n    } catch (error) {\n      var _error$response4;\n      console.error(`API: Failed to bulk delete category ${id}:`, ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n      throw error;\n    }\n  }\n\n  // Utility method to set auth token\n  setAuthToken(token) {\n    localStorage.setItem('auth_token', token);\n  }\n\n  // Utility method to remove auth token\n  removeAuthToken() {\n    localStorage.removeItem('auth_token');\n  }\n\n  // Utility method to check if user is authenticated\n  isAuthenticated() {\n    return !!localStorage.getItem('auth_token');\n  }\n}\nexport const apiClient = new ApiClient();\nexport default apiClient;","map":{"version":3,"names":["axios","ApiClient","constructor","baseURL","process","env","REACT_APP_API_URL","client","create","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","signIn","credentials","post","data","createCard","card","getCards","params","get","getCard","id","updateCard","patch","deleteCard","console","log","delete","_error$response2","message","deleteCardBulk","_error$response3","moveCard","newParentId","new_parent_id","getCardsByParent","parentId","getCardsHierarchy","categoryId","category_id","getCategories","items","createCategory","name","generateAITree","bulkDeleteCategory","_error$response4","setAuthToken","setItem","removeAuthToken","isAuthenticated","apiClient"],"sources":["/Users/tassiobs/Documents/vocatree-fe/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport {\n  AuthSignInRequest,\n  AuthToken,\n  Card,\n  CardCreate,\n  CardUpdate,\n  CardListResponse,\n  Category,\n  CategoryListResponse\n} from '../types/api';\n\nclass ApiClient {\n  private client: AxiosInstance;\n  private baseURL: string;\n\n  constructor(baseURL: string = process.env.REACT_APP_API_URL || 'http://localhost:8000') {\n    this.baseURL = baseURL;\n    this.client = axios.create({\n      baseURL: this.baseURL,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Request interceptor to add auth token\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('auth_token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Response interceptor for error handling\n    this.client.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('auth_token');\n          window.location.href = '/login';\n        }\n        \n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Authentication\n  async signIn(credentials: AuthSignInRequest): Promise<AuthToken> {\n    const response: AxiosResponse<AuthToken> = await this.client.post('/auth/signin', credentials);\n    return response.data;\n  }\n\n  // Cards\n  async createCard(card: CardCreate): Promise<Card> {\n    const response: AxiosResponse<Card> = await this.client.post('/cards/', card);\n    return response.data;\n  }\n\n  async getCards(params?: {\n    parent_id?: number | null;\n    limit?: number;\n    offset?: number;\n  }): Promise<CardListResponse> {\n    const response: AxiosResponse<CardListResponse> = await this.client.get('/cards/', { params });\n    return response.data;\n  }\n\n  async getCard(id: number): Promise<Card> {\n    const response: AxiosResponse<Card> = await this.client.get(`/cards/${id}`);\n    return response.data;\n  }\n\n  async updateCard(id: number, card: CardUpdate): Promise<Card> {\n    const response: AxiosResponse<Card> = await this.client.patch(`/cards/${id}`, card);\n    return response.data;\n  }\n\n  async deleteCard(id: number): Promise<void> {\n    console.log(`API: DELETE /cards/${id}`);\n    try {\n      await this.client.delete(`/cards/${id}`);\n      console.log(`API: Successfully deleted card ${id}`);\n    } catch (error: any) {\n      console.error(`API: Failed to delete card ${id}:`, error.response?.data || error.message);\n      throw error;\n    }\n  }\n\n  async deleteCardBulk(id: number): Promise<void> {\n    console.log(`API: DELETE /cards/${id}/bulk`);\n    try {\n      await this.client.delete(`/cards/${id}/bulk`);\n      console.log(`API: Successfully bulk deleted card ${id}`);\n    } catch (error: any) {\n      console.error(`API: Failed to bulk delete card ${id}:`, error.response?.data || error.message);\n      throw error;\n    }\n  }\n\n  async moveCard(id: number, newParentId: number | null): Promise<void> {\n    await this.client.patch(`/cards/${id}/move`, { new_parent_id: newParentId });\n  }\n\n  async getCardsByParent(parentId: number, params?: {\n    limit?: number;\n    offset?: number;\n  }): Promise<CardListResponse> {\n    const response: AxiosResponse<CardListResponse> = await this.client.get(\n      `/cards/by-parent/${parentId}`,\n      { params }\n    );\n    return response.data;\n  }\n\n  async getCardsHierarchy(categoryId?: number): Promise<Card[]> {\n    const params = categoryId ? { category_id: categoryId } : {};\n    const response: AxiosResponse<Card[]> = await this.client.get('/cards/hierarchy', { params });\n    return response.data;\n  }\n\n  // Categories\n  async getCategories(): Promise<Category[]> {\n    const response: AxiosResponse<CategoryListResponse> = await this.client.get('/categories/');\n    return response.data.items;\n  }\n\n  async createCategory(name: string): Promise<Category> {\n    const response: AxiosResponse<Category> = await this.client.post('/categories/', { name });\n    return response.data;\n  }\n\n  async generateAITree(data: {\n    language: string;\n    category_name: string;\n    prompt?: string;\n  }): Promise<any> {\n    const response: AxiosResponse<any> = await this.client.post('/categories/ai-generate-tree', data);\n    return response.data;\n  }\n\n  async bulkDeleteCategory(id: number): Promise<void> {\n    console.log(`API: POST /categories/bulk-delete with category_id: ${id}`);\n    try {\n      await this.client.post(`/categories/bulk-delete`, { category_id: id });\n      console.log(`API: Successfully bulk deleted category ${id}`);\n    } catch (error: any) {\n      console.error(`API: Failed to bulk delete category ${id}:`, error.response?.data || error.message);\n      throw error;\n    }\n  }\n\n  // Utility method to set auth token\n  setAuthToken(token: string): void {\n    localStorage.setItem('auth_token', token);\n  }\n\n  // Utility method to remove auth token\n  removeAuthToken(): void {\n    localStorage.removeItem('auth_token');\n  }\n\n  // Utility method to check if user is authenticated\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('auth_token');\n  }\n}\n\nexport const apiClient = new ApiClient();\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}